package zerjioang.im.legalhack.dao;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 

/**
 * Entity mapped to table MENSAJES.
 */
public class MENSAJES {

    private Long id;
    private String MENSAJE;
    private String DATE;
    private Boolean Propietario;
    private Long idchat;

    /**
     * Used to resolve relations
     */
    private transient DaoSession daoSession;

    /**
     * Used for active entity operations.
     */
    private transient MENSAJESDao myDao;

    private CHATS_INICIADOS cHATS_INICIADOS;
    private Long cHATS_INICIADOS__resolvedKey;


    public MENSAJES() {
    }

    public MENSAJES(Long id) {
        this.id = id;
    }

    public MENSAJES(Long id, String MENSAJE, String DATE, Boolean Propietario, Long idchat) {
        this.id = id;
        this.MENSAJE = MENSAJE;
        this.DATE = DATE;
        this.Propietario = Propietario;
        this.idchat = idchat;
    }

    /**
     * called by internal mechanisms, do not call yourself.
     */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getMENSAJESDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getMENSAJE() {
        return MENSAJE;
    }

    public void setMENSAJE(String MENSAJE) {
        this.MENSAJE = MENSAJE;
    }

    public String getDATE() {
        return DATE;
    }

    public void setDATE(String DATE) {
        this.DATE = DATE;
    }

    public Boolean getPropietario() {
        return Propietario;
    }

    public void setPropietario(Boolean Propietario) {
        this.Propietario = Propietario;
    }

    public Long getIdchat() {
        return idchat;
    }

    public void setIdchat(Long idchat) {
        this.idchat = idchat;
    }

    /**
     * To-one relationship, resolved on first access.
     */
    public CHATS_INICIADOS getCHATS_INICIADOS() {
        Long __key = this.idchat;
        if (cHATS_INICIADOS__resolvedKey == null || !cHATS_INICIADOS__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CHATS_INICIADOSDao targetDao = daoSession.getCHATS_INICIADOSDao();
            CHATS_INICIADOS cHATS_INICIADOSNew = targetDao.load(__key);
            synchronized (this) {
                cHATS_INICIADOS = cHATS_INICIADOSNew;
                cHATS_INICIADOS__resolvedKey = __key;
            }
        }
        return cHATS_INICIADOS;
    }

    public void setCHATS_INICIADOS(CHATS_INICIADOS cHATS_INICIADOS) {
        synchronized (this) {
            this.cHATS_INICIADOS = cHATS_INICIADOS;
            idchat = cHATS_INICIADOS == null ? null : cHATS_INICIADOS.getId();
            cHATS_INICIADOS__resolvedKey = idchat;
        }
    }

    /**
     * Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context.
     */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.delete(this);
    }

    /**
     * Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context.
     */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.update(this);
    }

    /**
     * Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context.
     */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.refresh(this);
    }

}
